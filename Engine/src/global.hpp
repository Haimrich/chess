#ifndef ENGINE_GLOBAL_H_
#define ENGINE_GLOBAL_H_

#include <string>

namespace engine {

enum Side : size_t {
    WHITE = 0,
    BLACK,

    SIDES
};

enum Castling : size_t {
    KING_CASTLING = 0,
    QUEEN_CASTLING,

    CASTLINGS
};

enum Piece : size_t {
    KING    = 0,
    QUEEN,
    ROOK,
    BISHOP,
    KNIGHT,
    PAWN,

    PIECES
};

const int MAX_DEPTH = 100;

// https://github.com/thomasahle/sunfish/blob/master/sunfish.py

const int PIECE_SQUARE_TABLES[PIECES][64] = {
		{60004, 60054, 60047, 59901, 59901, 60060, 60083, 59938,  59968, 60010, 60055, 60056, 60056, 60055, 60010, 60003,  59938, 60012, 59943, 60044, 59933, 60028, 60037, 59969,  59945, 60050, 60011, 59996, 59981, 60013, 0, 59951,  59945, 59957, 59948, 59972, 59949, 59953, 59992, 59950,  59953, 59958, 59957, 59921, 59936, 59968, 59971, 59968,  59996, 60003, 59986, 59950, 59943, 59982, 60013, 60004,  60017, 60030, 59997, 59986, 60006, 59999, 60040, 60018},
		{935, 930, 921, 825, 998, 953, 1017, 955,  943, 961, 989, 919, 949, 1005, 986, 953,  927, 972, 961, 989, 1001, 992, 972, 931,  930, 913, 951, 946, 954, 949, 916, 923,  915, 914, 927, 924, 928, 919, 909, 907,  899, 923, 916, 918, 913, 918, 913, 902,  893, 911, 0, 910, 914, 914, 908, 891,  890, 899, 898, 916, 898, 893, 895, 887},
		{514, 508, 512, 483, 516, 512, 535, 529,  534, 508, 535, 546, 534, 541, 513, 539,  498, 514, 507, 512, 524, 506, 504, 494,  0, 484, 495, 492, 497, 475, 470, 473,  451, 444, 463, 458, 466, 450, 433, 449,  437, 451, 437, 454, 454, 444, 453, 433,  426, 441, 448, 453, 450, 436, 435, 426,  449, 455, 461, 484, 477, 461, 448, 447},
		{261, 242, 238, 244, 297, 213, 283, 270,  309, 340, 355, 278, 281, 351, 322, 298,  311, 359, 288, 361, 372, 310, 348, 306,  345, 337, 340, 354, 346, 345, 335, 330,  333, 330, 337, 343, 337, 336, 0, 327,  334, 345, 344, 335, 328, 345, 340, 335,  339, 340, 331, 326, 327, 326, 340, 336,  313, 322, 305, 308, 306, 305, 310, 310},
		{214, 227, 205, 205, 270, 225, 222, 210,  277, 274, 380, 244, 284, 342, 276, 266,  290, 347, 281, 354, 353, 307, 342, 278,  304, 304, 325, 317, 313, 321, 305, 297,  279, 285, 311, 301, 302, 315, 282,  0, 262, 290, 293, 302, 298, 295, 291, 266,  257, 265, 282, 0, 282, 0, 257, 260,  206, 257, 254, 256, 261, 245, 258, 211},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 183, 186, 173, 202, 182, 185, 190,  107, 129, 121, 144, 140, 131, 144, 107,  83, 116, 98, 115, 114, 0, 115, 87,  74, 103, 110, 109, 106, 101, 0, 77,  78, 109, 105, 89, 90, 98, 103, 81,  69, 108, 93, 63, 64, 86, 103, 69},
    };

const int PIECE_VALUES[PIECES] = {60000, 929, 479, 320, 280, 100};

const int MATE_VALUE = PIECE_VALUES[KING] + 10*PIECE_VALUES[QUEEN];
const int EVAL_ROUGHNESS = 20;
const int MAX_TRANSPOSITION_TABLE_SIZE = 1e7;

std::string trim(std::string& str, char c);

bool isLower(char c);

bool toUpper(char c);

bool isDigit(char c);

}


#endif