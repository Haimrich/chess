version: '3.8'

# ===== KAFKA GLOBAL ENV ====== #

x-global-kafka: &global-kafka
  KAFKA_ADDRESS: kafka:9092
  KAFKA_OUTBOUND_TOPIC: websocket.outbound
  KAFKA_INBOUND_TOPIC: websocket.inbound
  KAFKA_GAME_TOPIC: game
  KAFKA_CHALLENGE_TOPIC: challenge
  KAFKA_GAME_GROUP_ID: game
  KAFKA_CHALLENGE_GROUP_ID: challenge
  KAFKA_DISPATCHER_GROUP_ID: dispatcher

# ===== VOLUMES ====== #

volumes:
  chess_zookeeper_data:
  chess_zookeeper_log:
  chess_kafka_data:
  chess_kafka_log:
  chess_user_mongodb:
  chess_game_mongodb:

# ===== SERVICES ====== #

services:

  # ===== FRONTEND ====== #

  frontend:
    container_name: chess_frontend
    image: chess_frontend
    build: ./frontend
    depends_on:
      - wsnode_0
      - user 
    ports:
      - 80:80
    volumes:
      - ./frontend/nginx.kafka.conf:/etc/nginx/nginx.conf:ro
    restart: always

  # ===== USER SERVICE ====== #

  user:
    container_name: chess_user
    image: chess_user
    build: ./user
    depends_on:
      - user_mongodb
      - engine
    environment:
      MONGODB_URI: mongodb://user_mongodb:27017/chess

  user_mongodb:
    container_name: chess_user_mongodb
    image: mongo:latest
    volumes:
      - chess_user_mongodb:/data/db
    logging:
      driver: none
    
  # ===== ENGINE ====== #

  engine:
    container_name: chess_engine
    image: chess_engine
    build: 
      context: ./engine
      dockerfile: Dockerfile

  # ===== GAME SERVICES ====== #

  game_1:   
    container_name: chess_game_1
    image: chess_game
    build: ./game
    depends_on:
      - kafka
      - game_mongodb
    environment:
      <<: *global-kafka
      KAFKA_GAME_INSTANCE_ID: game_1
      MONGODB_URI: mongodb://game_mongodb:27017/chess
      ENGINE_ENDPOINT: http://engine:9080
    restart: "always"
    
  game_0:   
    container_name: chess_game_0
    image: chess_game
    build: ./game
    depends_on:
      - kafka
      - game_mongodb
    environment:
      <<: *global-kafka
      KAFKA_GAME_INSTANCE_ID: game_0
      MONGODB_URI: mongodb://game_mongodb:27017/chess
      ENGINE_ENDPOINT: http://engine:9080
    restart: "always"

  game_mongodb:
    container_name: chess_game_mongodb
    image: mongo:latest
    volumes:
      - chess_game_mongodb:/data/db
    logging:
      driver: none

  # ===== CHALLENGE SERVICE ====== #

  challenge:   
    container_name: chess_challenge
    image: chess_challenge
    build: ./challenge
    depends_on:
      - kafka
    environment:
      <<: *global-kafka
      KAFKA_CHALLENGE_INSTANCE_ID: challenge
    restart: "always"

  # ===== INBOUND MESSAGE DISPATCHERS ====== #

  dispatcher_1:
    container_name: chess_dispatcher_1
    image: chess_dispatcher
    build: ./dispatcher
    depends_on:
      - kafka
    environment:
      <<: *global-kafka
      KAFKA_DISPATCHER_INSTANCE_ID: dispatcher_1
      USER_SERVICE_ADDRESS: http://user:8070/
    restart: "always"

  dispatcher_0:
    container_name: chess_dispatcher_0
    image: chess_dispatcher
    build: ./dispatcher
    depends_on:
      - kafka
    environment:
      <<: *global-kafka
      KAFKA_DISPATCHER_INSTANCE_ID: dispatcher_0
      USER_SERVICE_ADDRESS: http://user:8070/
    restart: "always"

  # ===== WEBSOCKET NODES ====== #

  wsnode_1:
    container_name: chess_wsnode_1
    image: chess_wsnode
    build: ./wsnode
    ports:
      - 8082:8081
    depends_on:
      - kafka
    environment:
      <<: *global-kafka
      KAFKA_WSNODE_INSTANCE_ID: wsnode_1
    restart: "always"

  wsnode_0:
    container_name: chess_wsnode_0
    image: chess_wsnode
    build: ./wsnode
    ports:
      - 8081:8081
    depends_on:
      - kafka
    environment:
      <<: *global-kafka
      KAFKA_WSNODE_INSTANCE_ID: wsnode_0
    restart: "always"
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8081"]
        interval: 3s
        timeout: 10s
        retries: 20

  # ===== KAFKA ====== #

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    volumes:
      - chess_zookeeper_data:/var/lib/zookeeper/data
      - chess_zookeeper_log:/var/lib/zookeeper/log
    logging:
      driver: none

  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - chess_kafka_data:/var/lib/kafka/data
      - chess_kafka_log:/var/lib/kafka/log
    logging:
      driver: none
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8083:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    logging:
      driver: none

  # ===== MONITORING ====== #

  prometheus:
    image: prom/prometheus:latest
    user: root
    container_name: prometheus
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - cadvisor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
    - 8180:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    command:
    - '--enable_load_reader=true'
    depends_on:
    - engine
    - kafka
    - user
    - wsnode_0

