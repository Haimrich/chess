version: '3.8'

services:
  frontend:
    container_name: chess_frontend
    image: chess_frontend
    build: ./frontend
    depends_on:
      - backend
      - wsnode
    ports:
      - 80:80
    volumes:
      - ./frontend/nginx.kafka.conf:/etc/nginx/nginx.conf:ro

  backend:
    container_name: chess_backend
    image: chess_backend
    build: ./backend
    depends_on:
      - mongodb
      - engine
    environment:
      MONGODB_URI: mongodb://mongodb:27017/chess
      ENGINE_ENDPOINT: http://engine:9080
    ports:
      - 8080:8080

  engine:
    container_name: chess_engine
    image: chess_engine
    build: 
      context: ./engine
      dockerfile: Dockerfile

  mongodb:
    container_name: chess_mongodb
    image: mongo:latest
    volumes:
      - chess_mongodb:/data/db
    logging:
      driver: none

  game_1:   
    container_name: kafka_game_1
    image: chess_game
    build: ./game
    depends_on:
      - kafka
    environment:
      KAFKA_ADDRESS: kafka:9092
      KAFKA_GAME_INSTANCE_ID: game_1
      KAFKA_GAME_GROUP_ID: game
      KAFKA_OUTBOUND_TOPIC: websocket.outbound
      KAFKA_CHALLENGE_TOPIC: challenge
      KAFKA_GAME_TOPIC: game
      MONGODB_URI: mongodb://mongodb:27017/chess
      ENGINE_ENDPOINT: http://engine:9080
    restart: "always"
    
  game:   
    container_name: kafka_game
    image: chess_game
    build: ./game
    depends_on:
      - kafka
    environment:
      KAFKA_ADDRESS: kafka:9092
      KAFKA_GAME_INSTANCE_ID: game_0
      KAFKA_GAME_GROUP_ID: game
      KAFKA_OUTBOUND_TOPIC: websocket.outbound
      KAFKA_CHALLENGE_TOPIC: challenge
      KAFKA_GAME_TOPIC: game
      MONGODB_URI: mongodb://mongodb:27017/chess
      ENGINE_ENDPOINT: http://engine:9080
    restart: "always"

  challenge:   
    container_name: kafka_challenge
    image: chess_challenge
    build: ./challenge
    depends_on:
      - kafka
    environment:
      KAFKA_ADDRESS: kafka:9092
      KAFKA_CHALLENGE_INSTANCE_ID: challenge
      KAFKA_CHALLENGE_GROUP_ID: challenge
      KAFKA_OUTBOUND_TOPIC: websocket.outbound
      KAFKA_CHALLENGE_TOPIC: challenge
      KAFKA_GAME_TOPIC: game
    restart: "always"

  dispatcher_1:
    container_name: kafka_dispatcher_1
    image: chess_dispatcher
    build: ./dispatcher
    depends_on:
      - kafka
    environment:
      KAFKA_ADDRESS: kafka:9092
      KAFKA_DISPATCHER_INSTANCE_ID: dispatcher_1
      KAFKA_DISPATCHER_GROUP_ID: dispatcher
      KAFKA_INBOUND_TOPIC: websocket.inbound
      KAFKA_CHALLENGE_TOPIC: challenge
      KAFKA_GAME_TOPIC: game
    restart: "always"

  dispatcher:
    container_name: kafka_dispatcher_0
    image: chess_dispatcher
    build: ./dispatcher
    depends_on:
      - kafka
    environment:
      KAFKA_ADDRESS: kafka:9092
      KAFKA_DISPATCHER_INSTANCE_ID: dispatcher_0
      KAFKA_DISPATCHER_GROUP_ID: dispatcher
      KAFKA_INBOUND_TOPIC: websocket.inbound
      KAFKA_CHALLENGE_TOPIC: challenge
      KAFKA_GAME_TOPIC: game
    restart: "always"

  wsnode_1:
    container_name: kafka_wsnode_1
    image: chess_wsnode
    build: ./wsnode
    ports:
      - 8082:8081
    depends_on:
      - kafka
    environment:
      KAFKA_ADDRESS: kafka:9092
      KAFKA_WSNODE_INSTANCE_ID: wsnode2
      KAFKA_INBOUND_TOPIC: websocket.inbound
      KAFKA_OUTBOUND_TOPIC: websocket.outbound
    restart: "always"

  wsnode:
    container_name: kafka_wsnode
    image: chess_wsnode
    build: ./wsnode
    ports:
      - 8081:8081
    depends_on:
      - kafka
    environment:
      KAFKA_ADDRESS: kafka:9092
      KAFKA_WSNODE_INSTANCE_ID: wsnode1
      KAFKA_INBOUND_TOPIC: websocket.inbound
      KAFKA_OUTBOUND_TOPIC: websocket.outbound
    restart: "always"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    volumes:
      - chess_zookeeper_data:/var/lib/zookeeper/data
      - chess_zookeeper_log:/var/lib/zookeeper/log
    logging:
      driver: none

  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - chess_kafka_data:/var/lib/kafka/data
      - chess_kafka_log:/var/lib/kafka/log
    logging:
      driver: none
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8083:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    logging:
      driver: none

  force-attach:
    image: bash
    command: tail -f /dev/null

volumes:
  chess_zookeeper_data:
  chess_zookeeper_log:
  chess_kafka_data:
  chess_kafka_log:
  chess_mongodb: